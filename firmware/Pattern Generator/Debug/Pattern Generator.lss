
Pattern Generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000003c4  00000458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  00000460  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b93  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  000010ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000477  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000552  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000277  00000000  00000000  0000253e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000027b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_3>
  10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_4>
  14:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 ec       	ldi	r30, 0xC4	; 196
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 30       	cpi	r26, 0x08	; 8
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e0       	ldi	r26, 0x08	; 8
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a1 31       	cpi	r26, 0x11	; 17
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  ea:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <rotorCheck>:



int rotorCheck()
{
	if(turned)
  f2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <turned>
  f6:	88 23       	and	r24, r24
  f8:	49 f0       	breq	.+18     	; 0x10c <rotorCheck+0x1a>
	{
		turned = 0;
  fa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <turned>
		if(clockwise)
  fe:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <clockwise>
 102:	81 11       	cpse	r24, r1
 104:	06 c0       	rjmp	.+12     	; 0x112 <rotorCheck+0x20>
		{
			return 1;
		}
		else
		{
			return -1;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	08 95       	ret
		}
	}
	
	return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	08 95       	ret
	if(turned)
	{
		turned = 0;
		if(clockwise)
		{
			return 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
			return -1;
		}
	}
	
	return 0;
}
 116:	08 95       	ret

00000118 <main>:
static uint8_t voltage = 0;
static uint8_t channel[8] = {0x65,0x01,0xff,0xf6,0x82,0x00,0x34,0x75};

int main(void)
{
	cli();
 118:	f8 94       	cli

	DDRB = 0b11111110;
 11a:	9e ef       	ldi	r25, 0xFE	; 254
 11c:	94 b9       	out	0x04, r25	; 4
	PORTB = 0b11111111;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	85 b9       	out	0x05, r24	; 5
	
	DDRC = 0b00000000;
 122:	17 b8       	out	0x07, r1	; 7
	PORTC = 0b11111111;
 124:	88 b9       	out	0x08, r24	; 8

	DDRD = 0b01111111;
 126:	2f e7       	ldi	r18, 0x7F	; 127
 128:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0b01111111;
 12a:	2b b9       	out	0x0b, r18	; 11
 
	DDRE = 0b11111111;
 12c:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b11111110;
 12e:	9e b9       	out	0x0e, r25	; 14

 	PCICR = 0b00000111;
 130:	87 e0       	ldi	r24, 0x07	; 7
 132:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 	PCMSK0 = 0b00000001;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
 	PCMSK1 = 0b00000001;
 13c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	PCMSK2 = 0b10000000;
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>

    OCR1A = 0x3C08;
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	9c e3       	ldi	r25, 0x3C	; 60
 14a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 14e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    TCCR1B = (1 << WGM12);
 152:	e1 e8       	ldi	r30, 0x81	; 129
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
    TIMSK1 = (1 << OCIE1A);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    TCCR1B = (1 << CS12) | (1 << CS10);
 160:	85 e0       	ldi	r24, 0x05	; 5
 162:	80 83       	st	Z, r24
	
	sei();
 164:	78 94       	sei
				{
					PORTD = 0b11101111;
				}
				else
				{
					PORTD = 0b11011111;
 166:	0f ed       	ldi	r16, 0xDF	; 223

			case  2:
				voltage = (voltage + rotorCheck()) % 2;
				if (voltage == 0)
				{
					PORTD = 0b11101111;
 168:	1f ee       	ldi	r17, 0xEF	; 239
	sei();
	
    while (1) 
    {	
		
		switch (mode)
 16a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	a1 f0       	breq	.+40     	; 0x19a <main+0x82>
 172:	18 f0       	brcs	.+6      	; 0x17a <main+0x62>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	29 f1       	breq	.+74     	; 0x1c2 <main+0xaa>
 178:	fa cf       	rjmp	.-12     	; 0x16e <main+0x56>
		{
			case 0:
				channel[channelNum] = (channel[channelNum] + rotorCheck()) & 0b00111111;
 17a:	e0 90 09 01 	lds	r14, 0x0109	; 0x800109 <channelNum>
 17e:	8e 2d       	mov	r24, r14
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ec 01       	movw	r28, r24
 184:	c0 50       	subi	r28, 0x00	; 0
 186:	df 4f       	sbci	r29, 0xFF	; 255
 188:	f8 80       	ld	r15, Y
 18a:	0e 94 79 00 	call	0xf2	; 0xf2 <rotorCheck>
 18e:	8f 0d       	add	r24, r15
 190:	8f 73       	andi	r24, 0x3F	; 63
 192:	88 83       	st	Y, r24
				PORTD=~(channel[channelNum]);
 194:	80 95       	com	r24
 196:	8b b9       	out	0x0b, r24	; 11
				break;
 198:	e8 cf       	rjmp	.-48     	; 0x16a <main+0x52>

			case 1:
				channelNum = (channelNum + rotorCheck()) % 8;
 19a:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <channelNum>
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	0e 94 79 00 	call	0xf2	; 0xf2 <rotorCheck>
 1a4:	8c 0f       	add	r24, r28
 1a6:	9d 1f       	adc	r25, r29
 1a8:	87 70       	andi	r24, 0x07	; 7
 1aa:	90 78       	andi	r25, 0x80	; 128
 1ac:	99 23       	and	r25, r25
 1ae:	24 f4       	brge	.+8      	; 0x1b8 <main+0xa0>
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	88 6f       	ori	r24, 0xF8	; 248
 1b4:	9f 6f       	ori	r25, 0xFF	; 255
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <channelNum>
				PORTD=~(channelNum);
 1bc:	80 95       	com	r24
 1be:	8b b9       	out	0x0b, r24	; 11
				break;
 1c0:	d4 cf       	rjmp	.-88     	; 0x16a <main+0x52>

			case  2:
				voltage = (voltage + rotorCheck()) % 2;
 1c2:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <__data_end>
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	0e 94 79 00 	call	0xf2	; 0xf2 <rotorCheck>
 1cc:	8c 0f       	add	r24, r28
 1ce:	9d 1f       	adc	r25, r29
 1d0:	81 70       	andi	r24, 0x01	; 1
 1d2:	90 78       	andi	r25, 0x80	; 128
 1d4:	99 23       	and	r25, r25
 1d6:	24 f4       	brge	.+8      	; 0x1e0 <main+0xc8>
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	8e 6f       	ori	r24, 0xFE	; 254
 1dc:	9f 6f       	ori	r25, 0xFF	; 255
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
				if (voltage == 0)
 1e4:	81 11       	cpse	r24, r1
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <main+0xd4>
				{
					PORTD = 0b11101111;
 1e8:	1b b9       	out	0x0b, r17	; 11
 1ea:	bf cf       	rjmp	.-130    	; 0x16a <main+0x52>
				}
				else
				{
					PORTD = 0b11011111;
 1ec:	0b b9       	out	0x0b, r16	; 11
 1ee:	bd cf       	rjmp	.-134    	; 0x16a <main+0x52>

000001f0 <__vector_3>:
}



ISR(PCINT0_vect)
{	
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
	if(!turned)
 200:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <turned>
 204:	81 11       	cpse	r24, r1
 206:	03 c0       	rjmp	.+6      	; 0x20e <__vector_3+0x1e>
	{
	clockwise = 1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <clockwise>
	}
	turned = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <turned>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	82 e5       	ldi	r24, 0x52	; 82
 218:	97 e0       	ldi	r25, 0x07	; 7
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <__vector_3+0x2a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__vector_3+0x34>
 224:	00 00       	nop
	_delay_ms(150);
}
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_4>:



ISR(PCINT1_vect)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
	if(!turned)
 246:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <turned>
 24a:	81 11       	cpse	r24, r1
 24c:	02 c0       	rjmp	.+4      	; 0x252 <__vector_4+0x1c>
	{
	clockwise = 0;
 24e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <clockwise>
	}
	turned = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <turned>
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	82 e5       	ldi	r24, 0x52	; 82
 25c:	97 e0       	ldi	r25, 0x07	; 7
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <__vector_4+0x28>
 266:	00 c0       	rjmp	.+0      	; 0x268 <__vector_4+0x32>
 268:	00 00       	nop
	_delay_ms(150);
}
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_5>:



ISR(PCINT2_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
	if (!buttonPress)
 294:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <buttonPress>
 298:	21 11       	cpse	r18, r1
 29a:	0a c0       	rjmp	.+20     	; 0x2b0 <__vector_5+0x36>
	{
	mode = (mode + 1) % 3;
 29c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	0e 94 b8 01 	call	0x370	; 0x370 <__divmodhi4>
 2ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
	}
	buttonPress = ~buttonPress;
 2b0:	20 95       	com	r18
 2b2:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <buttonPress>
}
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_11>:



ISR(TIMER1_COMPA_vect)
{	
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	cli();
 2ec:	f8 94       	cli
	i=0;
	temp = 0;
	
	for (i; i < 8; i++)
	{
		temp |= temp | (((channel[i] >> bit) & 0b00000001) << i);
 2ee:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <bit>
 2f2:	e0 e0       	ldi	r30, 0x00	; 0
 2f4:	f1 e0       	ldi	r31, 0x01	; 1
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	81 91       	ld	r24, Z+
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	06 2e       	mov	r0, r22
 302:	02 c0       	rjmp	.+4      	; 0x308 <__vector_11+0x38>
 304:	95 95       	asr	r25
 306:	87 95       	ror	r24
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <__vector_11+0x34>
 30c:	81 70       	andi	r24, 0x01	; 1
 30e:	99 27       	eor	r25, r25
 310:	02 2e       	mov	r0, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <__vector_11+0x48>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <__vector_11+0x44>
 31c:	48 2b       	or	r20, r24
 31e:	2f 5f       	subi	r18, 0xFF	; 255
 320:	3f 4f       	sbci	r19, 0xFF	; 255
	cli();
	
	i=0;
	temp = 0;
	
	for (i; i < 8; i++)
 322:	28 30       	cpi	r18, 0x08	; 8
 324:	31 05       	cpc	r19, r1
 326:	51 f7       	brne	.-44     	; 0x2fc <__vector_11+0x2c>
 328:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <temp>
 32c:	88 e0       	ldi	r24, 0x08	; 8
 32e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <i>
	{
		temp |= temp | (((channel[i] >> bit) & 0b00000001) << i);
	}
	PORTB = (temp<<1);
 332:	44 0f       	add	r20, r20
 334:	45 b9       	out	0x05, r20	; 5
	bit = (bit + 1) % 8;
 336:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bit>
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	87 70       	andi	r24, 0x07	; 7
 340:	90 78       	andi	r25, 0x80	; 128
 342:	99 23       	and	r25, r25
 344:	24 f4       	brge	.+8      	; 0x34e <__vector_11+0x7e>
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	88 6f       	ori	r24, 0xF8	; 248
 34a:	9f 6f       	ori	r25, 0xFF	; 255
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <bit>
	
	sei();
 352:	78 94       	sei
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	7f 91       	pop	r23
 35e:	6f 91       	pop	r22
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__divmodhi4>:
 370:	97 fb       	bst	r25, 7
 372:	07 2e       	mov	r0, r23
 374:	16 f4       	brtc	.+4      	; 0x37a <__divmodhi4+0xa>
 376:	00 94       	com	r0
 378:	07 d0       	rcall	.+14     	; 0x388 <__divmodhi4_neg1>
 37a:	77 fd       	sbrc	r23, 7
 37c:	09 d0       	rcall	.+18     	; 0x390 <__divmodhi4_neg2>
 37e:	0e 94 cc 01 	call	0x398	; 0x398 <__udivmodhi4>
 382:	07 fc       	sbrc	r0, 7
 384:	05 d0       	rcall	.+10     	; 0x390 <__divmodhi4_neg2>
 386:	3e f4       	brtc	.+14     	; 0x396 <__divmodhi4_exit>

00000388 <__divmodhi4_neg1>:
 388:	90 95       	com	r25
 38a:	81 95       	neg	r24
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	08 95       	ret

00000390 <__divmodhi4_neg2>:
 390:	70 95       	com	r23
 392:	61 95       	neg	r22
 394:	7f 4f       	sbci	r23, 0xFF	; 255

00000396 <__divmodhi4_exit>:
 396:	08 95       	ret

00000398 <__udivmodhi4>:
 398:	aa 1b       	sub	r26, r26
 39a:	bb 1b       	sub	r27, r27
 39c:	51 e1       	ldi	r21, 0x11	; 17
 39e:	07 c0       	rjmp	.+14     	; 0x3ae <__udivmodhi4_ep>

000003a0 <__udivmodhi4_loop>:
 3a0:	aa 1f       	adc	r26, r26
 3a2:	bb 1f       	adc	r27, r27
 3a4:	a6 17       	cp	r26, r22
 3a6:	b7 07       	cpc	r27, r23
 3a8:	10 f0       	brcs	.+4      	; 0x3ae <__udivmodhi4_ep>
 3aa:	a6 1b       	sub	r26, r22
 3ac:	b7 0b       	sbc	r27, r23

000003ae <__udivmodhi4_ep>:
 3ae:	88 1f       	adc	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	5a 95       	dec	r21
 3b4:	a9 f7       	brne	.-22     	; 0x3a0 <__udivmodhi4_loop>
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	bc 01       	movw	r22, r24
 3bc:	cd 01       	movw	r24, r26
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
