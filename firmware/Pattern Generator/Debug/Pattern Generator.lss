
Pattern Generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000944  000009d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  000009e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd0  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ae  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053e  00000000  00000000  00002016  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000554  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000404  00000000  00000000  00002c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_3>
  10:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_4>
  14:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e4       	ldi	r30, 0x44	; 68
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 30       	cpi	r26, 0x08	; 8
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e0       	ldi	r26, 0x08	; 8
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a1 31       	cpi	r26, 0x11	; 17
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 a0 04 	jmp	0x940	; 0x940 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
static uint8_t channelNum = 0;
static uint8_t voltage = 0;
static uint8_t channel[8] = {0x65,0b01010111,0b00111011,0xf6,0x82,0x00,0x34,0b01010101};

int main(void)
{
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
	cli();
 100:	f8 94       	cli

	DDRB = 0b11111110;
 102:	84 e2       	ldi	r24, 0x24	; 36
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2e ef       	ldi	r18, 0xFE	; 254
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	PORTB = 0b11111111;
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
	
	DDRC = 0b00000000;
 116:	87 e2       	ldi	r24, 0x27	; 39
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	10 82       	st	Z, r1
	PORTC = 0b11111111;
 11e:	88 e2       	ldi	r24, 0x28	; 40
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18

	DDRD = 0b01111111;
 128:	8a e2       	ldi	r24, 0x2A	; 42
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	2f e7       	ldi	r18, 0x7F	; 127
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
	PORTD = 0b01111111;
 132:	8b e2       	ldi	r24, 0x2B	; 43
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	2f e7       	ldi	r18, 0x7F	; 127
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
 
	DDRE = 0b11111111;
 13c:	8d e2       	ldi	r24, 0x2D	; 45
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
	PORTE = 0b11111110;
 146:	8e e2       	ldi	r24, 0x2E	; 46
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	2e ef       	ldi	r18, 0xFE	; 254
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18

 	PCICR = 0b00000111;
 150:	88 e6       	ldi	r24, 0x68	; 104
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	27 e0       	ldi	r18, 0x07	; 7
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
 	PCMSK0 = 0b00000001;
 15a:	8b e6       	ldi	r24, 0x6B	; 107
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
 	PCMSK1 = 0b00000001;
 164:	8c e6       	ldi	r24, 0x6C	; 108
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	PCMSK2 = 0b10000000;
 16e:	8d e6       	ldi	r24, 0x6D	; 109
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	20 e8       	ldi	r18, 0x80	; 128
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18

    OCR1A = 0x0FFF;
 178:	88 e8       	ldi	r24, 0x88	; 136
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	3f e0       	ldi	r19, 0x0F	; 15
 180:	fc 01       	movw	r30, r24
 182:	31 83       	std	Z+1, r19	; 0x01
 184:	20 83       	st	Z, r18
    TCCR1B = (1 << WGM12);
 186:	81 e8       	ldi	r24, 0x81	; 129
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	28 e0       	ldi	r18, 0x08	; 8
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
    TIMSK1 = (1 << OCIE1A);
 190:	8f e6       	ldi	r24, 0x6F	; 111
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	22 e0       	ldi	r18, 0x02	; 2
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
    TCCR1B = (0b11 << CS10);
 19a:	81 e8       	ldi	r24, 0x81	; 129
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	23 e0       	ldi	r18, 0x03	; 3
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
	
	sei();
 1a4:	78 94       	sei
	
    while (1) 
    {	
		
		switch (mode)
 1a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	91 05       	cpc	r25, r1
 1b2:	59 f1       	breq	.+86     	; 0x20a <main+0x118>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	91 05       	cpc	r25, r1
 1b8:	09 f4       	brne	.+2      	; 0x1bc <main+0xca>
 1ba:	41 c0       	rjmp	.+130    	; 0x23e <main+0x14c>
 1bc:	89 2b       	or	r24, r25
 1be:	09 f0       	breq	.+2      	; 0x1c2 <main+0xd0>
 1c0:	60 c0       	rjmp	.+192    	; 0x282 <main+0x190>
		{
			case 0:
				channel[channelNum] = (channel[channelNum] + rotorCheck()) & 0b00111111;
 1c2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <channelNum>
 1c6:	08 2f       	mov	r16, r24
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <channelNum>
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	80 50       	subi	r24, 0x00	; 0
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	fc 01       	movw	r30, r24
 1d8:	f0 80       	ld	r15, Z
 1da:	0e 94 42 01 	call	0x284	; 0x284 <rotorCheck>
 1de:	8f 0d       	add	r24, r15
 1e0:	28 2f       	mov	r18, r24
 1e2:	2f 73       	andi	r18, 0x3F	; 63
 1e4:	c8 01       	movw	r24, r16
 1e6:	80 50       	subi	r24, 0x00	; 0
 1e8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
				PORTD=~(channel[channelNum]);
 1ee:	8b e2       	ldi	r24, 0x2B	; 43
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <channelNum>
 1f6:	22 2f       	mov	r18, r18
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	20 50       	subi	r18, 0x00	; 0
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	f9 01       	movw	r30, r18
 200:	20 81       	ld	r18, Z
 202:	20 95       	com	r18
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18
				break;
 208:	3c c0       	rjmp	.+120    	; 0x282 <main+0x190>

			case 1:
				channelNum = (channelNum + rotorCheck()) % 8;
 20a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <channelNum>
 20e:	08 2f       	mov	r16, r24
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	0e 94 42 01 	call	0x284	; 0x284 <rotorCheck>
 216:	80 0f       	add	r24, r16
 218:	91 1f       	adc	r25, r17
 21a:	87 70       	andi	r24, 0x07	; 7
 21c:	90 78       	andi	r25, 0x80	; 128
 21e:	99 23       	and	r25, r25
 220:	24 f4       	brge	.+8      	; 0x22a <main+0x138>
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	88 6f       	ori	r24, 0xF8	; 248
 226:	9f 6f       	ori	r25, 0xFF	; 255
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <channelNum>
				PORTD=~(channelNum);
 22e:	8b e2       	ldi	r24, 0x2B	; 43
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <channelNum>
 236:	20 95       	com	r18
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
				break;
 23c:	22 c0       	rjmp	.+68     	; 0x282 <main+0x190>

			case  2:
				voltage = (voltage + rotorCheck()) % 2;
 23e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <voltage>
 242:	08 2f       	mov	r16, r24
 244:	10 e0       	ldi	r17, 0x00	; 0
 246:	0e 94 42 01 	call	0x284	; 0x284 <rotorCheck>
 24a:	80 0f       	add	r24, r16
 24c:	91 1f       	adc	r25, r17
 24e:	81 70       	andi	r24, 0x01	; 1
 250:	90 78       	andi	r25, 0x80	; 128
 252:	99 23       	and	r25, r25
 254:	24 f4       	brge	.+8      	; 0x25e <main+0x16c>
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	8e 6f       	ori	r24, 0xFE	; 254
 25a:	9f 6f       	ori	r25, 0xFF	; 255
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <voltage>
				if (voltage == 0)
 262:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <voltage>
 266:	88 23       	and	r24, r24
 268:	31 f4       	brne	.+12     	; 0x276 <main+0x184>
				{
					PORTD = 0b11101111;
 26a:	8b e2       	ldi	r24, 0x2B	; 43
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	2f ee       	ldi	r18, 0xEF	; 239
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
				}
				else
				{
					PORTD = 0b11011111;
				}
				break;
 274:	05 c0       	rjmp	.+10     	; 0x280 <main+0x18e>
				{
					PORTD = 0b11101111;
				}
				else
				{
					PORTD = 0b11011111;
 276:	8b e2       	ldi	r24, 0x2B	; 43
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	2f ed       	ldi	r18, 0xDF	; 223
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
				}
				break;
 280:	00 00       	nop
		}
	}
 282:	91 cf       	rjmp	.-222    	; 0x1a6 <main+0xb4>

00000284 <rotorCheck>:
}



int rotorCheck()
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	if(turned)
 28c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <turned>
 290:	88 23       	and	r24, r24
 292:	61 f0       	breq	.+24     	; 0x2ac <rotorCheck+0x28>
	{
		turned = 0;
 294:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <turned>
		if(clockwise)
 298:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <clockwise>
 29c:	88 23       	and	r24, r24
 29e:	19 f0       	breq	.+6      	; 0x2a6 <rotorCheck+0x22>
		{
			return 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <rotorCheck+0x2c>
		}
		else
		{
			return -1;
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	9f ef       	ldi	r25, 0xFF	; 255
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <rotorCheck+0x2c>
		}
	}
	
	return 0;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <__vector_3>:



ISR(PCINT0_vect)
{	
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	2e 97       	sbiw	r28, 0x0e	; 14
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	cd bf       	out	0x3d, r28	; 61
	if(!turned)
 2e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <turned>
 2ec:	88 23       	and	r24, r24
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <__vector_3+0x40>
	{
	clockwise = 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <clockwise>
	}
	turned = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <turned>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	a6 e1       	ldi	r26, 0x16	; 22
 302:	b3 e4       	ldi	r27, 0x43	; 67
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	ab 83       	std	Y+3, r26	; 0x03
 30a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	4a e7       	ldi	r20, 0x7A	; 122
 312:	55 e4       	ldi	r21, 0x45	; 69
 314:	69 81       	ldd	r22, Y+1	; 0x01
 316:	7a 81       	ldd	r23, Y+2	; 0x02
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	9c 81       	ldd	r25, Y+4	; 0x04
 31c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3>
 320:	dc 01       	movw	r26, r24
 322:	cb 01       	movw	r24, r22
 324:	8d 83       	std	Y+5, r24	; 0x05
 326:	9e 83       	std	Y+6, r25	; 0x06
 328:	af 83       	std	Y+7, r26	; 0x07
 32a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 e8       	ldi	r20, 0x80	; 128
 332:	5f e3       	ldi	r21, 0x3F	; 63
 334:	6d 81       	ldd	r22, Y+5	; 0x05
 336:	7e 81       	ldd	r23, Y+6	; 0x06
 338:	8f 81       	ldd	r24, Y+7	; 0x07
 33a:	98 85       	ldd	r25, Y+8	; 0x08
 33c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__cmpsf2>
 340:	88 23       	and	r24, r24
 342:	2c f4       	brge	.+10     	; 0x34e <__vector_3+0x98>
		__ticks = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9a 87       	std	Y+10, r25	; 0x0a
 34a:	89 87       	std	Y+9, r24	; 0x09
 34c:	3f c0       	rjmp	.+126    	; 0x3cc <__vector_3+0x116>
	else if (__tmp > 65535)
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	3f ef       	ldi	r19, 0xFF	; 255
 352:	4f e7       	ldi	r20, 0x7F	; 127
 354:	57 e4       	ldi	r21, 0x47	; 71
 356:	6d 81       	ldd	r22, Y+5	; 0x05
 358:	7e 81       	ldd	r23, Y+6	; 0x06
 35a:	8f 81       	ldd	r24, Y+7	; 0x07
 35c:	98 85       	ldd	r25, Y+8	; 0x08
 35e:	0e 94 de 03 	call	0x7bc	; 0x7bc <__gesf2>
 362:	18 16       	cp	r1, r24
 364:	4c f5       	brge	.+82     	; 0x3b8 <__vector_3+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e2       	ldi	r20, 0x20	; 32
 36c:	51 e4       	ldi	r21, 0x41	; 65
 36e:	69 81       	ldd	r22, Y+1	; 0x01
 370:	7a 81       	ldd	r23, Y+2	; 0x02
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	9c 81       	ldd	r25, Y+4	; 0x04
 376:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3>
 37a:	dc 01       	movw	r26, r24
 37c:	cb 01       	movw	r24, r22
 37e:	bc 01       	movw	r22, r24
 380:	cd 01       	movw	r24, r26
 382:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fixunssfsi>
 386:	dc 01       	movw	r26, r24
 388:	cb 01       	movw	r24, r22
 38a:	9a 87       	std	Y+10, r25	; 0x0a
 38c:	89 87       	std	Y+9, r24	; 0x09
 38e:	0f c0       	rjmp	.+30     	; 0x3ae <__vector_3+0xf8>
 390:	80 e9       	ldi	r24, 0x90	; 144
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	9c 87       	std	Y+12, r25	; 0x0c
 396:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 398:	8b 85       	ldd	r24, Y+11	; 0x0b
 39a:	9c 85       	ldd	r25, Y+12	; 0x0c
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <__vector_3+0xe6>
 3a0:	9c 87       	std	Y+12, r25	; 0x0c
 3a2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a4:	89 85       	ldd	r24, Y+9	; 0x09
 3a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	9a 87       	std	Y+10, r25	; 0x0a
 3ac:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ae:	89 85       	ldd	r24, Y+9	; 0x09
 3b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 3b2:	89 2b       	or	r24, r25
 3b4:	69 f7       	brne	.-38     	; 0x390 <__vector_3+0xda>
	_delay_ms(150);
}
 3b6:	14 c0       	rjmp	.+40     	; 0x3e0 <__vector_3+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3b8:	6d 81       	ldd	r22, Y+5	; 0x05
 3ba:	7e 81       	ldd	r23, Y+6	; 0x06
 3bc:	8f 81       	ldd	r24, Y+7	; 0x07
 3be:	98 85       	ldd	r25, Y+8	; 0x08
 3c0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fixunssfsi>
 3c4:	dc 01       	movw	r26, r24
 3c6:	cb 01       	movw	r24, r22
 3c8:	9a 87       	std	Y+10, r25	; 0x0a
 3ca:	89 87       	std	Y+9, r24	; 0x09
 3cc:	89 85       	ldd	r24, Y+9	; 0x09
 3ce:	9a 85       	ldd	r25, Y+10	; 0x0a
 3d0:	9e 87       	std	Y+14, r25	; 0x0e
 3d2:	8d 87       	std	Y+13, r24	; 0x0d
 3d4:	8d 85       	ldd	r24, Y+13	; 0x0d
 3d6:	9e 85       	ldd	r25, Y+14	; 0x0e
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <__vector_3+0x122>
 3dc:	9e 87       	std	Y+14, r25	; 0x0e
 3de:	8d 87       	std	Y+13, r24	; 0x0d
 3e0:	00 00       	nop
 3e2:	2e 96       	adiw	r28, 0x0e	; 14
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <__vector_4>:



ISR(PCINT1_vect)
{
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	6f 93       	push	r22
 42c:	7f 93       	push	r23
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	af 93       	push	r26
 434:	bf 93       	push	r27
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	2e 97       	sbiw	r28, 0x0e	; 14
 444:	de bf       	out	0x3e, r29	; 62
 446:	cd bf       	out	0x3d, r28	; 61
	if(!turned)
 448:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <turned>
 44c:	88 23       	and	r24, r24
 44e:	11 f4       	brne	.+4      	; 0x454 <__vector_4+0x3e>
	{
	clockwise = 0;
 450:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <clockwise>
	}
	turned = 1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <turned>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	a6 e1       	ldi	r26, 0x16	; 22
 460:	b3 e4       	ldi	r27, 0x43	; 67
 462:	89 83       	std	Y+1, r24	; 0x01
 464:	9a 83       	std	Y+2, r25	; 0x02
 466:	ab 83       	std	Y+3, r26	; 0x03
 468:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	4a e7       	ldi	r20, 0x7A	; 122
 470:	55 e4       	ldi	r21, 0x45	; 69
 472:	69 81       	ldd	r22, Y+1	; 0x01
 474:	7a 81       	ldd	r23, Y+2	; 0x02
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	9c 81       	ldd	r25, Y+4	; 0x04
 47a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3>
 47e:	dc 01       	movw	r26, r24
 480:	cb 01       	movw	r24, r22
 482:	8d 83       	std	Y+5, r24	; 0x05
 484:	9e 83       	std	Y+6, r25	; 0x06
 486:	af 83       	std	Y+7, r26	; 0x07
 488:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	40 e8       	ldi	r20, 0x80	; 128
 490:	5f e3       	ldi	r21, 0x3F	; 63
 492:	6d 81       	ldd	r22, Y+5	; 0x05
 494:	7e 81       	ldd	r23, Y+6	; 0x06
 496:	8f 81       	ldd	r24, Y+7	; 0x07
 498:	98 85       	ldd	r25, Y+8	; 0x08
 49a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__cmpsf2>
 49e:	88 23       	and	r24, r24
 4a0:	2c f4       	brge	.+10     	; 0x4ac <__vector_4+0x96>
		__ticks = 1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	9a 87       	std	Y+10, r25	; 0x0a
 4a8:	89 87       	std	Y+9, r24	; 0x09
 4aa:	3f c0       	rjmp	.+126    	; 0x52a <__vector_4+0x114>
	else if (__tmp > 65535)
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	3f ef       	ldi	r19, 0xFF	; 255
 4b0:	4f e7       	ldi	r20, 0x7F	; 127
 4b2:	57 e4       	ldi	r21, 0x47	; 71
 4b4:	6d 81       	ldd	r22, Y+5	; 0x05
 4b6:	7e 81       	ldd	r23, Y+6	; 0x06
 4b8:	8f 81       	ldd	r24, Y+7	; 0x07
 4ba:	98 85       	ldd	r25, Y+8	; 0x08
 4bc:	0e 94 de 03 	call	0x7bc	; 0x7bc <__gesf2>
 4c0:	18 16       	cp	r1, r24
 4c2:	4c f5       	brge	.+82     	; 0x516 <__vector_4+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e2       	ldi	r20, 0x20	; 32
 4ca:	51 e4       	ldi	r21, 0x41	; 65
 4cc:	69 81       	ldd	r22, Y+1	; 0x01
 4ce:	7a 81       	ldd	r23, Y+2	; 0x02
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	9c 81       	ldd	r25, Y+4	; 0x04
 4d4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3>
 4d8:	dc 01       	movw	r26, r24
 4da:	cb 01       	movw	r24, r22
 4dc:	bc 01       	movw	r22, r24
 4de:	cd 01       	movw	r24, r26
 4e0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fixunssfsi>
 4e4:	dc 01       	movw	r26, r24
 4e6:	cb 01       	movw	r24, r22
 4e8:	9a 87       	std	Y+10, r25	; 0x0a
 4ea:	89 87       	std	Y+9, r24	; 0x09
 4ec:	0f c0       	rjmp	.+30     	; 0x50c <__vector_4+0xf6>
 4ee:	80 e9       	ldi	r24, 0x90	; 144
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	9c 87       	std	Y+12, r25	; 0x0c
 4f4:	8b 87       	std	Y+11, r24	; 0x0b
 4f6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4f8:	9c 85       	ldd	r25, Y+12	; 0x0c
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <__vector_4+0xe4>
 4fe:	9c 87       	std	Y+12, r25	; 0x0c
 500:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 502:	89 85       	ldd	r24, Y+9	; 0x09
 504:	9a 85       	ldd	r25, Y+10	; 0x0a
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	9a 87       	std	Y+10, r25	; 0x0a
 50a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 50c:	89 85       	ldd	r24, Y+9	; 0x09
 50e:	9a 85       	ldd	r25, Y+10	; 0x0a
 510:	89 2b       	or	r24, r25
 512:	69 f7       	brne	.-38     	; 0x4ee <__vector_4+0xd8>
	_delay_ms(150);
}
 514:	14 c0       	rjmp	.+40     	; 0x53e <__vector_4+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 516:	6d 81       	ldd	r22, Y+5	; 0x05
 518:	7e 81       	ldd	r23, Y+6	; 0x06
 51a:	8f 81       	ldd	r24, Y+7	; 0x07
 51c:	98 85       	ldd	r25, Y+8	; 0x08
 51e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fixunssfsi>
 522:	dc 01       	movw	r26, r24
 524:	cb 01       	movw	r24, r22
 526:	9a 87       	std	Y+10, r25	; 0x0a
 528:	89 87       	std	Y+9, r24	; 0x09
 52a:	89 85       	ldd	r24, Y+9	; 0x09
 52c:	9a 85       	ldd	r25, Y+10	; 0x0a
 52e:	9e 87       	std	Y+14, r25	; 0x0e
 530:	8d 87       	std	Y+13, r24	; 0x0d
 532:	8d 85       	ldd	r24, Y+13	; 0x0d
 534:	9e 85       	ldd	r25, Y+14	; 0x0e
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <__vector_4+0x120>
 53a:	9e 87       	std	Y+14, r25	; 0x0e
 53c:	8d 87       	std	Y+13, r24	; 0x0d
 53e:	00 00       	nop
 540:	2e 96       	adiw	r28, 0x0e	; 14
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <__vector_5>:



ISR(PCINT2_vect)
{
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	2f 93       	push	r18
 582:	3f 93       	push	r19
 584:	5f 93       	push	r21
 586:	6f 93       	push	r22
 588:	7f 93       	push	r23
 58a:	8f 93       	push	r24
 58c:	9f 93       	push	r25
 58e:	af 93       	push	r26
 590:	bf 93       	push	r27
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
	if (!buttonPress)
 59a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <buttonPress>
 59e:	88 23       	and	r24, r24
 5a0:	61 f4       	brne	.+24     	; 0x5ba <__vector_5+0x46>
	{
	mode = (mode + 1) % 3;
 5a2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
 5a6:	88 2f       	mov	r24, r24
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	23 e0       	ldi	r18, 0x03	; 3
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	b9 01       	movw	r22, r18
 5b2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divmodhi4>
 5b6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
	}
	buttonPress = ~buttonPress;
 5ba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <buttonPress>
 5be:	80 95       	com	r24
 5c0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <buttonPress>
}
 5c4:	00 00       	nop
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	3f 91       	pop	r19
 5da:	2f 91       	pop	r18
 5dc:	0f 90       	pop	r0
 5de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_11>:



ISR(TIMER1_COMPA_vect)
{	
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	2f 93       	push	r18
 5f6:	3f 93       	push	r19
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
	cli();
 608:	f8 94       	cli
	
 	i=0;
 60a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
 	temp = 0;
 60e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 	
 	for (i; i < 8; i++)
 612:	29 c0       	rjmp	.+82     	; 0x666 <__vector_11+0x7e>
 	{
 		temp |= (((channel[i] >> (bit)) & 0b00000001) << i);
 614:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 618:	88 2f       	mov	r24, r24
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	80 50       	subi	r24, 0x00	; 0
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	fc 01       	movw	r30, r24
 622:	80 81       	ld	r24, Z
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <bit>
 62c:	22 2f       	mov	r18, r18
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <__vector_11+0x4e>
 632:	95 95       	asr	r25
 634:	87 95       	ror	r24
 636:	2a 95       	dec	r18
 638:	e2 f7       	brpl	.-8      	; 0x632 <__vector_11+0x4a>
 63a:	81 70       	andi	r24, 0x01	; 1
 63c:	99 27       	eor	r25, r25
 63e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <i>
 642:	22 2f       	mov	r18, r18
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <__vector_11+0x64>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	2a 95       	dec	r18
 64e:	e2 f7       	brpl	.-8      	; 0x648 <__vector_11+0x60>
 650:	98 2f       	mov	r25, r24
 652:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 656:	89 2b       	or	r24, r25
 658:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	cli();
	
 	i=0;
 	temp = 0;
 	
 	for (i; i < 8; i++)
 65c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 660:	8f 5f       	subi	r24, 0xFF	; 255
 662:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i>
 666:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 66a:	88 30       	cpi	r24, 0x08	; 8
 66c:	98 f2       	brcs	.-90     	; 0x614 <__vector_11+0x2c>
 	{
 		temp |= (((channel[i] >> (bit)) & 0b00000001) << i);
 	}
 	PORTB = temp & 0b11111110;
 66e:	85 e2       	ldi	r24, 0x25	; 37
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 676:	2e 7f       	andi	r18, 0xFE	; 254
 678:	fc 01       	movw	r30, r24
 67a:	20 83       	st	Z, r18
 	bit = (bit + 1) % 8;
 67c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <bit>
 680:	88 2f       	mov	r24, r24
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	87 70       	andi	r24, 0x07	; 7
 688:	90 78       	andi	r25, 0x80	; 128
 68a:	99 23       	and	r25, r25
 68c:	24 f4       	brge	.+8      	; 0x696 <__vector_11+0xae>
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	88 6f       	ori	r24, 0xF8	; 248
 692:	9f 6f       	ori	r25, 0xFF	; 255
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <bit>
	 
	sei();
 69a:	78 94       	sei
}
 69c:	00 00       	nop
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	ff 91       	pop	r31
 6a4:	ef 91       	pop	r30
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	3f 91       	pop	r19
 6ac:	2f 91       	pop	r18
 6ae:	0f 90       	pop	r0
 6b0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__cmpsf2>:
 6ba:	0e 94 91 03 	call	0x722	; 0x722 <__fp_cmp>
 6be:	08 f4       	brcc	.+2      	; 0x6c2 <__cmpsf2+0x8>
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	08 95       	ret

000006c4 <__fixunssfsi>:
 6c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__fp_splitA>
 6c8:	88 f0       	brcs	.+34     	; 0x6ec <__fixunssfsi+0x28>
 6ca:	9f 57       	subi	r25, 0x7F	; 127
 6cc:	98 f0       	brcs	.+38     	; 0x6f4 <__fixunssfsi+0x30>
 6ce:	b9 2f       	mov	r27, r25
 6d0:	99 27       	eor	r25, r25
 6d2:	b7 51       	subi	r27, 0x17	; 23
 6d4:	b0 f0       	brcs	.+44     	; 0x702 <__fixunssfsi+0x3e>
 6d6:	e1 f0       	breq	.+56     	; 0x710 <__fixunssfsi+0x4c>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	1a f0       	brmi	.+6      	; 0x6e8 <__fixunssfsi+0x24>
 6e2:	ba 95       	dec	r27
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__fixunssfsi+0x14>
 6e6:	14 c0       	rjmp	.+40     	; 0x710 <__fixunssfsi+0x4c>
 6e8:	b1 30       	cpi	r27, 0x01	; 1
 6ea:	91 f0       	breq	.+36     	; 0x710 <__fixunssfsi+0x4c>
 6ec:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_zero>
 6f0:	b1 e0       	ldi	r27, 0x01	; 1
 6f2:	08 95       	ret
 6f4:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__fp_zero>
 6f8:	67 2f       	mov	r22, r23
 6fa:	78 2f       	mov	r23, r24
 6fc:	88 27       	eor	r24, r24
 6fe:	b8 5f       	subi	r27, 0xF8	; 248
 700:	39 f0       	breq	.+14     	; 0x710 <__fixunssfsi+0x4c>
 702:	b9 3f       	cpi	r27, 0xF9	; 249
 704:	cc f3       	brlt	.-14     	; 0x6f8 <__fixunssfsi+0x34>
 706:	86 95       	lsr	r24
 708:	77 95       	ror	r23
 70a:	67 95       	ror	r22
 70c:	b3 95       	inc	r27
 70e:	d9 f7       	brne	.-10     	; 0x706 <__fixunssfsi+0x42>
 710:	3e f4       	brtc	.+14     	; 0x720 <__fixunssfsi+0x5c>
 712:	90 95       	com	r25
 714:	80 95       	com	r24
 716:	70 95       	com	r23
 718:	61 95       	neg	r22
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	8f 4f       	sbci	r24, 0xFF	; 255
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	08 95       	ret

00000722 <__fp_cmp>:
 722:	99 0f       	add	r25, r25
 724:	00 08       	sbc	r0, r0
 726:	55 0f       	add	r21, r21
 728:	aa 0b       	sbc	r26, r26
 72a:	e0 e8       	ldi	r30, 0x80	; 128
 72c:	fe ef       	ldi	r31, 0xFE	; 254
 72e:	16 16       	cp	r1, r22
 730:	17 06       	cpc	r1, r23
 732:	e8 07       	cpc	r30, r24
 734:	f9 07       	cpc	r31, r25
 736:	c0 f0       	brcs	.+48     	; 0x768 <__fp_cmp+0x46>
 738:	12 16       	cp	r1, r18
 73a:	13 06       	cpc	r1, r19
 73c:	e4 07       	cpc	r30, r20
 73e:	f5 07       	cpc	r31, r21
 740:	98 f0       	brcs	.+38     	; 0x768 <__fp_cmp+0x46>
 742:	62 1b       	sub	r22, r18
 744:	73 0b       	sbc	r23, r19
 746:	84 0b       	sbc	r24, r20
 748:	95 0b       	sbc	r25, r21
 74a:	39 f4       	brne	.+14     	; 0x75a <__fp_cmp+0x38>
 74c:	0a 26       	eor	r0, r26
 74e:	61 f0       	breq	.+24     	; 0x768 <__fp_cmp+0x46>
 750:	23 2b       	or	r18, r19
 752:	24 2b       	or	r18, r20
 754:	25 2b       	or	r18, r21
 756:	21 f4       	brne	.+8      	; 0x760 <__fp_cmp+0x3e>
 758:	08 95       	ret
 75a:	0a 26       	eor	r0, r26
 75c:	09 f4       	brne	.+2      	; 0x760 <__fp_cmp+0x3e>
 75e:	a1 40       	sbci	r26, 0x01	; 1
 760:	a6 95       	lsr	r26
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	81 1d       	adc	r24, r1
 766:	81 1d       	adc	r24, r1
 768:	08 95       	ret

0000076a <__fp_split3>:
 76a:	57 fd       	sbrc	r21, 7
 76c:	90 58       	subi	r25, 0x80	; 128
 76e:	44 0f       	add	r20, r20
 770:	55 1f       	adc	r21, r21
 772:	59 f0       	breq	.+22     	; 0x78a <__fp_splitA+0x10>
 774:	5f 3f       	cpi	r21, 0xFF	; 255
 776:	71 f0       	breq	.+28     	; 0x794 <__fp_splitA+0x1a>
 778:	47 95       	ror	r20

0000077a <__fp_splitA>:
 77a:	88 0f       	add	r24, r24
 77c:	97 fb       	bst	r25, 7
 77e:	99 1f       	adc	r25, r25
 780:	61 f0       	breq	.+24     	; 0x79a <__fp_splitA+0x20>
 782:	9f 3f       	cpi	r25, 0xFF	; 255
 784:	79 f0       	breq	.+30     	; 0x7a4 <__fp_splitA+0x2a>
 786:	87 95       	ror	r24
 788:	08 95       	ret
 78a:	12 16       	cp	r1, r18
 78c:	13 06       	cpc	r1, r19
 78e:	14 06       	cpc	r1, r20
 790:	55 1f       	adc	r21, r21
 792:	f2 cf       	rjmp	.-28     	; 0x778 <__fp_split3+0xe>
 794:	46 95       	lsr	r20
 796:	f1 df       	rcall	.-30     	; 0x77a <__fp_splitA>
 798:	08 c0       	rjmp	.+16     	; 0x7aa <__fp_splitA+0x30>
 79a:	16 16       	cp	r1, r22
 79c:	17 06       	cpc	r1, r23
 79e:	18 06       	cpc	r1, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	f1 cf       	rjmp	.-30     	; 0x786 <__fp_splitA+0xc>
 7a4:	86 95       	lsr	r24
 7a6:	71 05       	cpc	r23, r1
 7a8:	61 05       	cpc	r22, r1
 7aa:	08 94       	sec
 7ac:	08 95       	ret

000007ae <__fp_zero>:
 7ae:	e8 94       	clt

000007b0 <__fp_szero>:
 7b0:	bb 27       	eor	r27, r27
 7b2:	66 27       	eor	r22, r22
 7b4:	77 27       	eor	r23, r23
 7b6:	cb 01       	movw	r24, r22
 7b8:	97 f9       	bld	r25, 7
 7ba:	08 95       	ret

000007bc <__gesf2>:
 7bc:	0e 94 91 03 	call	0x722	; 0x722 <__fp_cmp>
 7c0:	08 f4       	brcc	.+2      	; 0x7c4 <__gesf2+0x8>
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	08 95       	ret

000007c6 <__mulsf3>:
 7c6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__mulsf3x>
 7ca:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_round>
 7ce:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_pscA>
 7d2:	38 f0       	brcs	.+14     	; 0x7e2 <__mulsf3+0x1c>
 7d4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscB>
 7d8:	20 f0       	brcs	.+8      	; 0x7e2 <__mulsf3+0x1c>
 7da:	95 23       	and	r25, r21
 7dc:	11 f0       	breq	.+4      	; 0x7e2 <__mulsf3+0x1c>
 7de:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_inf>
 7e2:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_nan>
 7e6:	11 24       	eor	r1, r1
 7e8:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_szero>

000007ec <__mulsf3x>:
 7ec:	0e 94 b5 03 	call	0x76a	; 0x76a <__fp_split3>
 7f0:	70 f3       	brcs	.-36     	; 0x7ce <__mulsf3+0x8>

000007f2 <__mulsf3_pse>:
 7f2:	95 9f       	mul	r25, r21
 7f4:	c1 f3       	breq	.-16     	; 0x7e6 <__mulsf3+0x20>
 7f6:	95 0f       	add	r25, r21
 7f8:	50 e0       	ldi	r21, 0x00	; 0
 7fa:	55 1f       	adc	r21, r21
 7fc:	62 9f       	mul	r22, r18
 7fe:	f0 01       	movw	r30, r0
 800:	72 9f       	mul	r23, r18
 802:	bb 27       	eor	r27, r27
 804:	f0 0d       	add	r31, r0
 806:	b1 1d       	adc	r27, r1
 808:	63 9f       	mul	r22, r19
 80a:	aa 27       	eor	r26, r26
 80c:	f0 0d       	add	r31, r0
 80e:	b1 1d       	adc	r27, r1
 810:	aa 1f       	adc	r26, r26
 812:	64 9f       	mul	r22, r20
 814:	66 27       	eor	r22, r22
 816:	b0 0d       	add	r27, r0
 818:	a1 1d       	adc	r26, r1
 81a:	66 1f       	adc	r22, r22
 81c:	82 9f       	mul	r24, r18
 81e:	22 27       	eor	r18, r18
 820:	b0 0d       	add	r27, r0
 822:	a1 1d       	adc	r26, r1
 824:	62 1f       	adc	r22, r18
 826:	73 9f       	mul	r23, r19
 828:	b0 0d       	add	r27, r0
 82a:	a1 1d       	adc	r26, r1
 82c:	62 1f       	adc	r22, r18
 82e:	83 9f       	mul	r24, r19
 830:	a0 0d       	add	r26, r0
 832:	61 1d       	adc	r22, r1
 834:	22 1f       	adc	r18, r18
 836:	74 9f       	mul	r23, r20
 838:	33 27       	eor	r19, r19
 83a:	a0 0d       	add	r26, r0
 83c:	61 1d       	adc	r22, r1
 83e:	23 1f       	adc	r18, r19
 840:	84 9f       	mul	r24, r20
 842:	60 0d       	add	r22, r0
 844:	21 1d       	adc	r18, r1
 846:	82 2f       	mov	r24, r18
 848:	76 2f       	mov	r23, r22
 84a:	6a 2f       	mov	r22, r26
 84c:	11 24       	eor	r1, r1
 84e:	9f 57       	subi	r25, 0x7F	; 127
 850:	50 40       	sbci	r21, 0x00	; 0
 852:	9a f0       	brmi	.+38     	; 0x87a <__mulsf3_pse+0x88>
 854:	f1 f0       	breq	.+60     	; 0x892 <__mulsf3_pse+0xa0>
 856:	88 23       	and	r24, r24
 858:	4a f0       	brmi	.+18     	; 0x86c <__mulsf3_pse+0x7a>
 85a:	ee 0f       	add	r30, r30
 85c:	ff 1f       	adc	r31, r31
 85e:	bb 1f       	adc	r27, r27
 860:	66 1f       	adc	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	88 1f       	adc	r24, r24
 866:	91 50       	subi	r25, 0x01	; 1
 868:	50 40       	sbci	r21, 0x00	; 0
 86a:	a9 f7       	brne	.-22     	; 0x856 <__mulsf3_pse+0x64>
 86c:	9e 3f       	cpi	r25, 0xFE	; 254
 86e:	51 05       	cpc	r21, r1
 870:	80 f0       	brcs	.+32     	; 0x892 <__mulsf3_pse+0xa0>
 872:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_inf>
 876:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_szero>
 87a:	5f 3f       	cpi	r21, 0xFF	; 255
 87c:	e4 f3       	brlt	.-8      	; 0x876 <__mulsf3_pse+0x84>
 87e:	98 3e       	cpi	r25, 0xE8	; 232
 880:	d4 f3       	brlt	.-12     	; 0x876 <__mulsf3_pse+0x84>
 882:	86 95       	lsr	r24
 884:	77 95       	ror	r23
 886:	67 95       	ror	r22
 888:	b7 95       	ror	r27
 88a:	f7 95       	ror	r31
 88c:	e7 95       	ror	r30
 88e:	9f 5f       	subi	r25, 0xFF	; 255
 890:	c1 f7       	brne	.-16     	; 0x882 <__mulsf3_pse+0x90>
 892:	fe 2b       	or	r31, r30
 894:	88 0f       	add	r24, r24
 896:	91 1d       	adc	r25, r1
 898:	96 95       	lsr	r25
 89a:	87 95       	ror	r24
 89c:	97 f9       	bld	r25, 7
 89e:	08 95       	ret

000008a0 <__fp_inf>:
 8a0:	97 f9       	bld	r25, 7
 8a2:	9f 67       	ori	r25, 0x7F	; 127
 8a4:	80 e8       	ldi	r24, 0x80	; 128
 8a6:	70 e0       	ldi	r23, 0x00	; 0
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	08 95       	ret

000008ac <__fp_nan>:
 8ac:	9f ef       	ldi	r25, 0xFF	; 255
 8ae:	80 ec       	ldi	r24, 0xC0	; 192
 8b0:	08 95       	ret

000008b2 <__fp_pscA>:
 8b2:	00 24       	eor	r0, r0
 8b4:	0a 94       	dec	r0
 8b6:	16 16       	cp	r1, r22
 8b8:	17 06       	cpc	r1, r23
 8ba:	18 06       	cpc	r1, r24
 8bc:	09 06       	cpc	r0, r25
 8be:	08 95       	ret

000008c0 <__fp_pscB>:
 8c0:	00 24       	eor	r0, r0
 8c2:	0a 94       	dec	r0
 8c4:	12 16       	cp	r1, r18
 8c6:	13 06       	cpc	r1, r19
 8c8:	14 06       	cpc	r1, r20
 8ca:	05 06       	cpc	r0, r21
 8cc:	08 95       	ret

000008ce <__fp_round>:
 8ce:	09 2e       	mov	r0, r25
 8d0:	03 94       	inc	r0
 8d2:	00 0c       	add	r0, r0
 8d4:	11 f4       	brne	.+4      	; 0x8da <__fp_round+0xc>
 8d6:	88 23       	and	r24, r24
 8d8:	52 f0       	brmi	.+20     	; 0x8ee <__fp_round+0x20>
 8da:	bb 0f       	add	r27, r27
 8dc:	40 f4       	brcc	.+16     	; 0x8ee <__fp_round+0x20>
 8de:	bf 2b       	or	r27, r31
 8e0:	11 f4       	brne	.+4      	; 0x8e6 <__fp_round+0x18>
 8e2:	60 ff       	sbrs	r22, 0
 8e4:	04 c0       	rjmp	.+8      	; 0x8ee <__fp_round+0x20>
 8e6:	6f 5f       	subi	r22, 0xFF	; 255
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	08 95       	ret

000008f0 <__divmodhi4>:
 8f0:	97 fb       	bst	r25, 7
 8f2:	07 2e       	mov	r0, r23
 8f4:	16 f4       	brtc	.+4      	; 0x8fa <__divmodhi4+0xa>
 8f6:	00 94       	com	r0
 8f8:	07 d0       	rcall	.+14     	; 0x908 <__divmodhi4_neg1>
 8fa:	77 fd       	sbrc	r23, 7
 8fc:	09 d0       	rcall	.+18     	; 0x910 <__divmodhi4_neg2>
 8fe:	0e 94 8c 04 	call	0x918	; 0x918 <__udivmodhi4>
 902:	07 fc       	sbrc	r0, 7
 904:	05 d0       	rcall	.+10     	; 0x910 <__divmodhi4_neg2>
 906:	3e f4       	brtc	.+14     	; 0x916 <__divmodhi4_exit>

00000908 <__divmodhi4_neg1>:
 908:	90 95       	com	r25
 90a:	81 95       	neg	r24
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__divmodhi4_neg2>:
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255

00000916 <__divmodhi4_exit>:
 916:	08 95       	ret

00000918 <__udivmodhi4>:
 918:	aa 1b       	sub	r26, r26
 91a:	bb 1b       	sub	r27, r27
 91c:	51 e1       	ldi	r21, 0x11	; 17
 91e:	07 c0       	rjmp	.+14     	; 0x92e <__udivmodhi4_ep>

00000920 <__udivmodhi4_loop>:
 920:	aa 1f       	adc	r26, r26
 922:	bb 1f       	adc	r27, r27
 924:	a6 17       	cp	r26, r22
 926:	b7 07       	cpc	r27, r23
 928:	10 f0       	brcs	.+4      	; 0x92e <__udivmodhi4_ep>
 92a:	a6 1b       	sub	r26, r22
 92c:	b7 0b       	sbc	r27, r23

0000092e <__udivmodhi4_ep>:
 92e:	88 1f       	adc	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	5a 95       	dec	r21
 934:	a9 f7       	brne	.-22     	; 0x920 <__udivmodhi4_loop>
 936:	80 95       	com	r24
 938:	90 95       	com	r25
 93a:	bc 01       	movw	r22, r24
 93c:	cd 01       	movw	r24, r26
 93e:	08 95       	ret

00000940 <_exit>:
 940:	f8 94       	cli

00000942 <__stop_program>:
 942:	ff cf       	rjmp	.-2      	; 0x942 <__stop_program>
